{"version":3,"sources":["components/ImgCoordinates.js","App.js","serviceWorker.js","index.js"],"names":["size","CoordinateText","props","coordinate","x","y","hd_constant_x","hd_constant_y","Math","round","_translateCoordinates","style","position","left","top","width","backgroundColor","color","fontSize","OverLayGrid","height","onMouseMove","x1","y1","x2","y2","display","grid","stroke","strokeWidth","guidelines","ImageBox","state","handleMouseMove","bind","event","clientX","clientY","rect","this","image","getBoundingClientRect","setState","className","ref","heigt","objectFit","src","imgsrc","Component","InputImage","htmlFor","id","name","type","accept","onChange","handleImageInput","ImgCoordinate","handleGLCheckBox","handleGridCheckBox","cb","target","checked","input","reader","FileReader","onloadend","dataURL","result","file","files","match","readAsDataURL","flexDirection","margin","marginLeft","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.047ef9d9.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nconst SAMPLE_IMG = \"assets/sample.jpg\";\r\nconst size = [1280,720];\r\n\r\nconst _translateCoordinates = (x, y) => {\r\n    let hd_constant_x = 960/(size[0]/ 2), hd_constant_y = 540/(size[1]/2)\r\n    x = x-size[0]/2;\r\n    y = 0 - (y-size[1]/2)\r\n    x = Math.round(hd_constant_x*x);\r\n    y = Math.round(hd_constant_y*y);\r\n    return {x, y};\r\n}\r\n\r\nconst CoordinateText = (props) => {\r\n    let coordinate = _translateCoordinates( props.x, props.y);\r\n    return(\r\n        <div style={{position:'absolute', left:-5, top:\"100%\",width:1290, backgroundColor:'black', color:'white', fontSize:30}}>\r\n            [{coordinate.x}, {coordinate.y}]\r\n        </div>\r\n    );\r\n}\r\n\r\nconst OverLayGrid = (props) => {\r\n    const customStyle = {\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        left: 0,\r\n        top: 0,\r\n    }\r\n    return(\r\n        <div style={customStyle} onMouseMove={props.onMouseMove}>\r\n            <svg height=\"100%\" width=\"100%\">\r\n                <line x1=\"50%\" y1=\"0\" x2=\"50%\" y2=\"100%\" style={{display: props.grid? \"block\" : \"none\", stroke:\"rgb(255,255,255)\", strokeWidth:2}} />\r\n                <line x1=\"0\" y1=\"50%\" x2=\"100%\" y2=\"50%\" style={{display: props.grid? \"block\" : \"none\", stroke:\"rgb(255,255,255)\", strokeWidth:2}} />\r\n                <line x1={props.x} y1=\"0\" x2={props.x} y2=\"100%\" style={{display: props.guidelines? \"block\":\"none\", stroke:\"rgb(255,255,255)\", strokeWidth:2}} />\r\n                <line x1=\"0\" y1={props.y} x2=\"100%\" y2={props.y} style={{display: props.guidelines? \"block\":\"none\", stroke:\"rgb(255,255,255)\", strokeWidth:2}} />\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass ImageBox extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            x: 0,\r\n            y: 0,\r\n        }\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    }\r\n\r\n    handleMouseMove(event) {\r\n        let x = event.clientX, y = event.clientY;\r\n        const rect = this.image.getBoundingClientRect();\r\n        this.setState( {\r\n            x: x - rect.left,\r\n            y: y - rect.top,\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const customstyle = {\r\n            width: '100%',\r\n            heigt: '100%',\r\n            objectFit: 'contain',\r\n        }\r\n\r\n        return(\r\n            <div className=\"imgbox\">\r\n                <img ref={image => this.image = image} style={customstyle} src={this.props.imgsrc}/>\r\n                <OverLayGrid onMouseMove={this.handleMouseMove} grid={this.props.grid} guidelines={this.props.guidelines} x={this.state.x} y={this.state.y}/>\r\n                <CoordinateText x={this.state.x} y={this.state.y}/>            \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst InputImage = (props) => {\r\n    return(\r\n        <div>\r\n            <label htmlFor='getFile'>Select a file </label>\r\n            <input id='getfile' name='getfile' type='file' accept='image/*' onChange={props.handleImageInput}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nclass ImgCoordinate extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imgsrc: SAMPLE_IMG,\r\n            x: 0,\r\n            y: 0,\r\n            grid: false,\r\n            guidelines: false,\r\n        }\r\n        this.handleGLCheckBox = this.handleGLCheckBox.bind(this);\r\n        this.handleGridCheckBox = this.handleGridCheckBox.bind(this)\r\n        this.handleImageInput = this.handleImageInput.bind(this);\r\n    }\r\n\r\n    handleGridCheckBox(event) {\r\n        var cb = event.target;\r\n        this.setState({\r\n            grid: cb.checked,\r\n        })\r\n    }\r\n\r\n    handleGLCheckBox(event) {\r\n        var cb = event.target;\r\n        this.setState({\r\n            guidelines: cb.checked,\r\n        })\r\n    }\r\n\r\n   \r\n    handleImageInput(event) {\r\n        var input = event.target;\r\n        var reader = new FileReader();\r\n        reader.onloadend = function(){\r\n            var dataURL = reader.result;\r\n            this.setState({\r\n                imgsrc: dataURL, \r\n            });\r\n        }.bind(this);\r\n        var file = input.files[0];\r\n        if (file && file.type.match('image.*')) {\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='imgcoordinates'>\r\n                <div style={{display: 'flex', flexDirection:'row', margin:'20px'}}>\r\n                    <InputImage handleImageInput={this.handleImageInput} />\r\n                    <div style={{marginLeft:20}}>\r\n                        <label htmlFor=\"grid\">Grid: </label>\r\n                        <input type=\"checkbox\" id=\"grid\" onChange={this.handleGridCheckBox}></input>\r\n                    </div>\r\n                    <div style={{marginLeft:20}}>\r\n                        <label htmlFor=\"guidelines\">Guide Lines: </label>\r\n                        <input type=\"checkbox\" id=\"guidelines\" onChange={this.handleGLCheckBox}></input>\r\n                    </div>\r\n                </div>\r\n                <ImageBox imgsrc={this.state.imgsrc} grid={this.state.grid} guidelines={this.state.guidelines}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ImgCoordinate;","import React from 'react';\nimport './App.css';\nimport ImgCoordinate from './components/ImgCoordinates';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ImgCoordinate />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}